{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","nameInputId","shortid","generate","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","console","log","props","onSubmit","reset","this","htmlFor","type","onChange","id","pattern","title","required","Component","ContactsList","contacts","onDeleteContacts","map","onClick","Filter","App","filter","ChangeFilter","e","deleteContacts","contactid","prevState","contact","FormSubmitHandler","some","i","alert","getVisibleContacts","normalizedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filterByName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.150480ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n  }\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    nameInputId = shortid.generate();\r\n\r\n    handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    // console.log(event.currentTarget);\r\n    // console.log(event.currentTarget.name);\r\n    // console.log(event.currentTarget.value);\r\n    this.setState({[name]: value});\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        console.log(this.state);\r\n        this.props.onSubmit(this.state);\r\n        this.reset();\r\n\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n        \r\n      <input\r\n        type=\"text\"\r\n        value={this.state.name} onChange={this.handleChange}\r\n        name=\"name\"\r\n        id={this.nameInputId}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        \r\n        />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            \r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required\r\n/>\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContacts }) => (\r\n    \r\n    <ul>{contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n            <p>{name}:{number}</p>\r\n            <button onClick={() => onDeleteContacts(id)}>Delete</button>\r\n        </li>\r\n    ))}\r\n            \r\n    </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContacts: PropTypes.func.isRequired\r\n}\r\n \r\n\r\nexport default ContactsList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <label>\r\n        Find contact by name <br />\r\n        <input type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n);\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Filter;","// import './App.css';\n\nimport { Component } from \"react\";\nimport shortid from \"shortid\";\nimport Form from \"./components/ContactForm\";\nimport ContactsList from \"./components/ContactsList\";\nimport Filter from \"./components/Filter\";\n\nclass App extends Component {\n\n  state = {\n    contacts: [\n\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  };\n\n  ChangeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n\n  }\n\n\n\n\n\n\n  deleteContacts = (contactid) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactid),\n    }));\n  };\n\n  FormSubmitHandler = ({ name, number }) => {\n    // console.log(data);\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    }\n\n    this.state.contacts.some((i) => i.name === name)\n      ? alert(`${name} is already in contacts`) :\n      this.setState(prevState => ({\n        contacts: [contact, ...prevState.contacts],\n      }))\n  };\n\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n\n    const filterByName = this.getVisibleContacts();\n\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.FormSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter value={filter}\n          onChange={this.ChangeFilter}\n        />\n        <ContactsList\n\n          contacts={filterByName}\n          onDeleteContacts={this.deleteContacts} />\n      </div>\n\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}